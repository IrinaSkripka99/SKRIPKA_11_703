{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","city","country","temp","time","dmy","error","API_KEY","App","state","undefined","gettingWeather","_callee","e","api_url","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","location","localtime","toString","slice","_this","setState","current","temp_c","stop","info","components_form","this","weather","React","Component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PASeA,EAPF,kBACTC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,2HADJ,IAEKF,EAAAC,EAAAC,cAAA,oKCIMC,EAPJ,SAAAC,GAAK,OACZJ,EAAAC,EAAAC,cAAA,QAAMG,SAAUD,EAAME,eAClBN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3CT,EAAAC,EAAAC,cAAA,yGCWOQ,EAdD,SAACN,GAAD,OACVJ,EAAAC,EAAAC,cAAA,WACKE,EAAMO,MACPX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mGAAqBE,EAAMO,KAA3B,IAAkCP,EAAMQ,SACxCZ,EAAAC,EAAAC,cAAA,iFAAkBE,EAAMS,MACxBb,EAAAC,EAAAC,cAAA,6CAAYE,EAAMU,MAClBd,EAAAC,EAAAC,cAAA,qDAAeE,EAAMW,MAGzBf,EAAAC,EAAAC,cAAA,SAAIE,EAAMY,SCNZC,EAAU,kCAgEDC,6MA7DXC,MAAQ,CACJN,UAAKO,EACLT,UAAKS,EACLR,aAAQQ,EACRJ,WAAMI,EACNN,UAAKM,EACLL,SAAIK,KAKRC,qDAAiB,SAAAC,EAAOC,GAAP,IAAAZ,EAAAa,EAAAC,EAAAX,EAAAC,EAAA,OAAAW,EAAAzB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAEbP,EAAEQ,mBACIpB,EAAKY,EAAES,OAAOC,SAAStB,KAAKuB,OAHrB,CAAAN,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAOLK,MAAK,8CAAAC,OAA+CnB,EAA/C,OAAAmB,OAA4DzB,EAA5D,YAPA,cAMHa,EANGI,EAAAS,KAAAT,EAAAE,KAAA,EAQQN,EAAQc,OARhB,OAQHb,EARGG,EAAAS,KASHvB,EAAMW,EAAKc,SAASC,UAAUC,WAAWC,MAAM,GAAG,IAClD3B,EAAIU,EAAKc,SAASC,UAAUC,WAAWC,MAAM,EAAE,IACrDC,EAAKC,SAAS,CACV/B,KAAKY,EAAKoB,QAAQC,OAClBnC,KAAKc,EAAKc,SAAS/B,KACnBI,QAAQa,EAAKc,SAAS3B,QACtBE,KAAKA,EACLC,IAAIA,EACJC,MAAM,KAjBDY,EAAAE,KAAA,iBAoBTa,EAAKC,SAAS,CACV/B,UAAKO,EACLT,UAAKS,EACLR,aAAQQ,EACRJ,MAAM,mIACNF,UAAKM,EACLL,SAAIK,IA1BC,yBAAAQ,EAAAmB,SAAAzB,oIAgCb,OACItB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC8C,EAAD,MACAhD,EAAAC,EAAAC,cAAC+C,EAAD,CAAM3C,cAAe4C,KAAK7B,iBAC1BrB,EAAAC,EAAAC,cAACiD,EAAD,CACAtC,KAAMqC,KAAK/B,MAAMN,KACjBF,KAAMuC,KAAK/B,MAAMR,KACjBC,QAASsC,KAAK/B,MAAMP,QACpBE,KAAMoC,KAAK/B,MAAML,KACjBC,IAAKmC,KAAK/B,MAAMJ,IAChBC,MAAOkC,KAAK/B,MAAMH,gBAvDhBoC,IAAMC,WCKJC,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASC,MACvB,2DCVNC,IAASC,OACL3D,EAAAC,EAAAC,cAAC0D,EAAD,MACAC,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7d57c910.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Info = () => (\r\n    <div>\r\n        <h2>Погодное приложение</h2>\r\n        `<h4>Узнайте погоду в вашем гроде</h4>\r\n    </div>\r\n);\r\n\r\nexport default Info;\r\n","import React from 'react';\r\n\r\nconst Form=props=>(\r\n    <form onSubmit={props.weatherMethod}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\r\n        <button>Получить погоду</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Weather=(props)=>(\r\n    <div>\r\n        {props.city &&\r\n        <div>\r\n            <p>Местоположение : {props.city},{props.country}</p>\r\n            <p>Температура : {props.temp}</p>\r\n            <p>Время : {props.time}</p>\r\n            <p>ГГ-ММ-ДД : {props.dmy}</p>\r\n        </div>\r\n        }\r\n        <p>{props.error}</p>\r\n    </div>\r\n);\r\n\r\nexport default Weather;\r\n","//Основной компонент,компанирует все элементы\r\nimport React from 'react';\r\nimport Info from './components/info'\r\nimport Form from './components/form'\r\nimport Weather from './components/weather'\r\n\r\nconst API_KEY = \"8c96a8adac5447629eb203740191507\";\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        temp:undefined,\r\n        city:undefined,\r\n        country:undefined,\r\n        error:undefined,\r\n        time:undefined,\r\n        dmy:undefined\r\n    };\r\n\r\n    //async,await -асинхронно\r\n    //fetch-возможность получать все со страницы\r\n    gettingWeather = async (e) => {\r\n\r\n        e.preventDefault();\r\n        const city=e.target.elements.city.value;\r\n\r\n        if(city){\r\n            const api_url = await\r\n                fetch(`https://api.apixu.com/v1/forecast.json?key=${API_KEY}&q=${city}&days=1`);\r\n            const data=await api_url.json();\r\n            const time= data.location.localtime.toString().slice(11,18);\r\n            const dmy=data.location.localtime.toString().slice(0,10);\r\n            this.setState({\r\n                temp:data.current.temp_c,\r\n                city:data.location.name,\r\n                country:data.location.country,\r\n                time:time,\r\n                dmy:dmy,\r\n                error:\"\"\r\n            });\r\n        }else {\r\n            this.setState({\r\n                temp:undefined,\r\n                city:undefined,\r\n                country:undefined,\r\n                error:\"Введите название города\",\r\n                time:undefined,\r\n                dmy:undefined\r\n            })\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Info></Info>\r\n                <Form weatherMethod={this.gettingWeather} />\r\n                <Weather\r\n                temp={this.state.temp}\r\n                city={this.state.city}\r\n                country={this.state.country}\r\n                time={this.state.time}\r\n                dmy={this.state.dmy}\r\n                error={this.state.error}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//экспортируем для подключения\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//один какой то компонент выводит на index.html\n//если js тип можно не писать расширение\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}