{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\itproger_react\\\\src\\\\App.js\";\n//Основной компонент,компанирует все элементы\nimport React from 'react';\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/weather';\nconst API_KEY = \"8c96a8adac5447629eb203740191507\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      temp: undefined,\n      city: undefined,\n      country: undefined,\n      error: undefined,\n      time: undefined,\n      dmy: undefined,\n      imageUrl: 'https://cdn.dribbble.com/users/658839/screenshots/2015006/city-illustration.png'\n    };\n  }\n\n  onCitySubmit(event) {\n    if (event.keyCode == 13) {\n      this.getPhotoForCity(event.target.value);\n      this.getWeatherForCity(event.target.value);\n    }\n  }\n\n  getWeatherForCity(city) {\n    fetch(\"https://api.apixu.com/v1/forecast.json?key=\".concat(API_KEY, \"&q=\").concat(city, \"&days=1\")).then(response => {\n      if (response.status !== 200) {\n        console.log(\"Error fetching data. Respons:\".concat(response.status));\n        return;\n      }\n\n      response.json().then(data => {\n        this.setState({\n          temp: data.current.temp_c,\n          city: data.location.name,\n          country: data.location.country,\n          time: time,\n          dmy: dmy,\n          error: \"\"\n        });\n      });\n    }).catch(err => {\n      console.log('Fetch Error :-S', err);\n    });\n  }\n\n  getPhotoForCity(city) {\n    this.setState({\n      loading: true\n    });\n    const url = \"\".concat(proxyurl, \"https://maps.googleapis.com/maps/api/place/textsearch/json?query=\").concat(city, \"&key=\").concat(PLACES_API_KEY);\n    fetch(url).then(response => {\n      if (response.status !== 200) {\n        console.log(\"Error fetching data. Response places:\".concat(response.status));\n        return;\n      }\n\n      response.json().then(data => {\n        const photoRef = data.results[0].photos[0].photo_reference;\n        const url = \"\".concat(proxyurl, \"https://maps.googleapis.com/maps/api/place/photo?maxheight=300&photoreference=\").concat(photoRef, \"&key=\").concat(PLACES_API_KEY);\n        fetch(url).then(response => {\n          if (response.status !== 200) {\n            console.log(\"Error fetching data from places API. Response:\".concat(response.status));\n            return;\n          }\n\n          response.blob().then(blob => {\n            const objectURL = URL.createObjectURL(blob);\n            this.setState({\n              imageUrl: objectURL,\n              loading: false\n            });\n          });\n        }).catch(err => {\n          if (err) {\n            console.log('Fetch Error Photo', err.message);\n          }\n        });\n      });\n    }).catch(err => {\n      if (err) {\n        console.log('Fetch Error Places', err.message);\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Form, {\n      weatherMethod: this.gettingWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      temp: this.state.temp,\n      city: this.state.city,\n      country: this.state.country,\n      time: this.state.time,\n      dmy: this.state.dmy,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }));\n  }\n\n} //экспортируем для подключения\n\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\User\\Desktop\\itproger_react\\src\\App.js"],"names":["React","Info","Form","Weather","API_KEY","App","Component","constructor","state","temp","undefined","city","country","error","time","dmy","imageUrl","onCitySubmit","event","keyCode","getPhotoForCity","target","value","getWeatherForCity","fetch","then","response","status","console","log","json","data","setState","current","temp_c","location","name","catch","err","loading","url","proxyurl","PLACES_API_KEY","photoRef","results","photos","photo_reference","blob","objectURL","URL","createObjectURL","message","render","gettingWeather"],"mappings":"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","sourcesContent":["//Основной компонент,компанирует все элементы\r\nimport React from 'react';\r\nimport Info from './components/info'\r\nimport Form from './components/form'\r\nimport Weather from './components/weather'\r\n\r\nconst API_KEY = \"8c96a8adac5447629eb203740191507\";\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            temp: undefined,\r\n            city: undefined,\r\n            country: undefined,\r\n            error: undefined,\r\n            time: undefined,\r\n            dmy: undefined,\r\n            imageUrl: 'https://cdn.dribbble.com/users/658839/screenshots/2015006/city-illustration.png'\r\n\r\n        }\r\n    }\r\n    onCitySubmit(event) {\r\n        if(event.keyCode == 13) {\r\n            this.getPhotoForCity(event.target.value);\r\n            this.getWeatherForCity(event.target.value);\r\n        }\r\n    }\r\n    getWeatherForCity(city) {\r\n        fetch(`https://api.apixu.com/v1/forecast.json?key=${API_KEY}&q=${city}&days=1`)\r\n            .then((response) => {\r\n                    if (response.status !== 200) {\r\n                        console.log(`Error fetching data. Respons:${response.status}`);\r\n                        return;\r\n                    }\r\n                    response.json().then((data) => {\r\n                        this.setState({\r\n                            temp: data.current.temp_c,\r\n                            city: data.location.name,\r\n                            country: data.location.country,\r\n                            time: time,\r\n                            dmy: dmy,\r\n                            error: \"\"\r\n                        });\r\n                    });\r\n                }\r\n            )\r\n            .catch((err) => {\r\n                console.log('Fetch Error :-S', err);\r\n            });\r\n    };\r\n    getPhotoForCity(city) {\r\n        this.setState({loading: true});\r\n        const url = `${proxyurl}https://maps.googleapis.com/maps/api/place/textsearch/json?query=${city}&key=${PLACES_API_KEY}`;\r\n        fetch(url)\r\n            .then((response) => {\r\n                    if (response.status !== 200) {\r\n                        console.log(`Error fetching data. Response places:${response.status}`);\r\n                        return;\r\n                    }\r\n                    response.json().then((data) => {\r\n                        const photoRef = data.results[0].photos[0].photo_reference;\r\n                        const url = `${proxyurl}https://maps.googleapis.com/maps/api/place/photo?maxheight=300&photoreference=${photoRef}&key=${PLACES_API_KEY}`;\r\n                        fetch(url)\r\n                            .then((response) => {\r\n                                    if (response.status !== 200) {\r\n                                        console.log(`Error fetching data from places API. Response:${response.status}`);\r\n                                        return;\r\n                                    }\r\n                                    response.blob().then((blob) => {\r\n                                        const objectURL = URL.createObjectURL(blob);\r\n                                        this.setState({imageUrl: objectURL, loading: false });\r\n                                    });\r\n                                }\r\n                            )\r\n                            .catch((err) => {\r\n                                if (err) {\r\n                                    console.log('Fetch Error Photo', err.message);\r\n                                }\r\n                            });\r\n                    });\r\n                }\r\n            )\r\n            .catch((err) => {\r\n                if (err) {\r\n                    console.log('Fetch Error Places', err.message);\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form weatherMethod={this.gettingWeather}/>\r\n                <Weather\r\n                    temp={this.state.temp}\r\n                    city={this.state.city}\r\n                    country={this.state.country}\r\n                    time={this.state.time}\r\n                    dmy={this.state.dmy}\r\n                    error={this.state.error}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//экспортируем для подключения\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}